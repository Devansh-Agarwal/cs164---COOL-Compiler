README file for Programming Assignment 4 (Java edition)
======================================================

Your directory should now contain the following files:

 ASTConstants.java    -> [class dir]/src/PA4J/ASTConstants.java
 ASTLexer.java	      -> [class dir]/src/PA4J/ASTLexer.java
 ASTParser.java	      -> [class dir]/src/PA4J/ASTParser.java
 AbstractSymbol.java  -> [class dir]/src/PA4J/AbstractSymbol.java
 AbstractTable.java   -> [class dir]/src/PA4J/AbstractTable.java
 BoolConst.java       -> [course dir]/src/PA3J/BoolConst.java
 ClassTable.java
 Flags.java	      -> [class dir]/src/PA4J/Flags.java
 IdSymbol.java	      -> [class dir]/src/PA4J/IdSymbol.java
 IdTable.java	      -> [class dir]/src/PA4J/IdTable.java
 IntSymbol.java	      -> [class dir]/src/PA4J/IntSymbol.java
 IntTable.java	      -> [class dir]/src/PA4J/IntTable.java
 ListNode.java	      -> [class dir]/src/PA4J/ListNode.java
 Makefile	      -> [class dir]/etc/../assignments/PA4J/Makefile
 README
 Semant.java	      -> [class dir]/src/PA4J/Semant.java
 StringSymbol.java    -> [class dir]/src/PA4J/StringSymbol.java
 StringTable.java     -> [class dir]/src/PA4J/StringTable.java
 SymbolTable.java     -> [class dir]/src/PA4J/SymbolTable.java
 SymtabExample.java   -> [class dir]/src/PA4J/SymtabExample.java
 TokenConstants.java  -> [class dir]/src/PA4J/TokenConstants.java
 TreeConstants.java
 TreeNode.java	      -> [class dir]/src/PA4J/TreeNode.java
 Utilities.java	      -> [class dir]/src/PA4J/Utilities.java
 bad.cl
 checkpoint
 cool-tree.aps	      -> [class dir]/src/PA4J/cool-tree.aps
 cool-tree.java
 compare-semant
 good.cl

	The build.xml contains targets for compiling and running your
	program. DO NOT MODIFY.

	The README contains this info. Part of the assignment is to fill
	the README with the write-up for your project. You should
	explain design decisions, explain why your code is correct, and
	why your test cases are adequate. It is part of the assignment
	to clearly and concisely explain things in text as well as to
	comment your code.  EDIT AND SUBMIT.

	good.cl and bad.cl test a few features of the semantic checker.
	You should add tests to ensure that good.cl exercises as many
	legal semantic combinations as possible and that bad.cl
	exercises as many kinds of semantic errors as possible.
        EDIT AND SUBMIT.

	cool-tree.aps contains the definitions for the tree language
	which you use to construct the abstract syntax tree (AST). This
	file is provided for your reference.  DO NOT MODIFY.

        TreeNode.java and ListNode.java contain definitions used by the
        tree package. DO NOT MODIFY.  

        cool-tree.java specifies and gives an implementation of Cool ASTs
        (see the README for PA3 and the "Cool Tour").  In this
        assignment, you will need to add functions to the AST classes to
        store, fetch, and compute information about the AST.

   	You should NOT remove any definitions that are already present
   	in cool-tree.java.  These function and data members are required
   	for the system to function properly.

        You should add any fields and methods to the classes you need to
        perform semantic analysis.  You will need to add, for example,
        methods which traverse the expressions of the tree and implement
        the type-checking rules.  The entry point to the semantic
        analyzer is program.semant().  EDIT AND SUBMIT cool-tree.java.

	ClassTable.java implements a placeholder class for a few useful
	methods.  Feel free to extend it to implement some real data
	strucutre.

	TreeConstants.java defined some useful symbol constants.  You
	may add some of your own, if you wish.

	ASTLexer.java, ASTParser.java, and ASTConstants.java implement a
	lexer and a parser for reading text representation of ASTs from
	console in the format produced by the parser phase. DO NOT
	MODIFY.

        Semant.java contains a driver to test the analyzer.  The main
        method reads an AST in text form from standard input, parses it,
        and then produces a type-annotated AST on standard output.  The
        script mycoolc can pass any of the standard flags to the
        semantic analyzer as well; for this assignment, -s (semantic
        analysis debug) may be useful as it sets a static variable
        Flags.semant_debug to "true".  If you want your semantic checker
        to print debug information when the option is set, write your
        debug code in the following format:

	      if (Flags.semant_debug)
	      {
		...
	      }

	semant_debug is provided as a convenience. You don't need to use
	the debugging flags if you don't want to. DON'T MODIFY
	Semant.java

	SymbolTable.java contains a symbol table implementation. Read
	the comments in the file and look at the example in
	SymtabExample.java.  You are not required to use this code, but
	you may find it useful. DO NOT MODIFY.

Instructions
------------

	To compile the example use of the symbol table, type

	% ant symtab-example

	This creates a shell script to run the symbol table example.

	To compile your semantic analyzer program type:

	% ant semant

	To test your semantic checker, type:

	% ./mysemant foo.cl

	mysemant is a version of mycoolc that omits code generation.
	mysemant parses all the cool files given on the command line and
	builds a single abstract syntax tree containing all class
	definitions appearing in the input files. Your semantic checker
	is then called on this abstract syntax tree.  If there are no
	errors, the program produces a type-annotated abstract syntax
	tree as output.

        To run the reference semantics analysisr on a file 'fool.cl':

        % ./ref-semant foo.cl

        To easily compare your implementation and the reference :

        % compare-semant foo.cl

        To run your checker on the files good.cl and bad.cl type:

	% ant test

        To run ten examples in tests directory type:

        % ant test-all

	If you think your semantic checker is correct and behaves like
	the one we wrote, you can try to run mycoolc using your checker,
	your parser and also your lexical analyzer if you choose (see
	below for instructions).  Remember if your lexer, parser or
	checker behaves in an unexpected manner, you may get errors
	anywhere.

	To turn in your work type:
        
        % ant submit-clean
        % submit PA4
        
	Be sure to submit the files cool-tree.java,
	ClassTable.java, TreeConstants.java, good.cl, bad.cl,
	good.output, bad.output, and README. Don't forget to edit the
	README file to include your write-up, and to write your own test
	cases in good.cl and bad.cl.

 	You may turn in the assignment as many times as you like.
 	However, only the last version will be retained for grading.

	GOOD LUCK!

---8<------8<------8<------8<---cut here---8<------8<------8<------8<---

Write-up for PA4
----------------

ADDED CLASSES:
Graph.java : Uses Edge.java and Vertex.java to create a directed graph. If the graph is a tree has methods conforms and lub
             implemented using a Stack and parent pointers.
Edge.java : A graph edge class
Vertex.java : A graph node class
Pair.java : A basic java 2-tuple class for convenience when extending the object environment

MODIFIED CLASSES:
cool-tree.java : added semant() methods to all expressions, attr, and method classes, and updated the semant method in programc 
ClassTable.java : the inheritance Graph, objectEnv, and methodEnv are kept in here and passed along during recursive descent of AST



Design Decisions & Process:
Followed the slides strategy, Process AST node n by first calling semant on it's subexpressions to get types for them and following the COOL manual to implement type checking rules. Used ErrorReporter to report errors.

Biggest Design strategy was splitting the process into 3 Phases:

	//Phase 1: Check for Basic Object Redefinitions
	//         Check for disallowed basic object inheriting
	//         Check for cycles


	//Phase 1 complete if no errors then inheritance graph (actually a tree since no multiple inheritance) is completely valid		

	//Phase 2 Create global Object and Method environments
	//Check for multiply defined errors during this phase as well
	//Check for existence of Main class and main method in main class
	//Check for inherited attribute names being declared in derived class

	//Phase 2 completed. This means code has the required classes and methods and all attributes and methods have valid names.

	//Phase 3 Type Checking using the strategy laid out in class and briefly mentioned above. Error handling done using the
        // object trick as mentioned in slides 


Implementation:
Our cool-tree contains a helper class that contains helper functions, including 'attrType', 'getFormalList', 'updateObjectEnv', and 'handleSELF_TYPE'. attrType goes and checks for an attribute not just in current class, but also in it's inherited classes. getFormalList does a similar thing but for methods instead of attributes. updateObjectEnv is basically SymbolTable.enterScope() with a little extra due to our implementation of the symboltable. Look at code for details.


