Things we still need to have/do:

1. Some kind of 2D hashmap that given a class name and an attribute name, returns the attribute index
(like if color is the first attribute in a class called crayon, it should return 1,
or if length is the second attribute in a class called crayton, it should return 2)
*return -1 if hashmap returns null


Here's a better example of what I want:
A Map<AbstractSymbol, Map<AbstractSymbol, Integer>> that maps [class name][method name] -> offset in dispatch table

Why do we need this? makes implementing expression like dispatch and static dispatch easier

2. Some way to get the offset of a variable that is in scope. (Look at Object again in cool-tree.java to see what I mean)
   Basically there are local variables in a given activation frame so if a local variable is the 1st argument/variable
   in the frame then maybe a hashmap that takes in this variable name will return 1, or -1 if variable not in frame

   Here's a better example of what I want:

   A Map<AbstractSymbol, Integer> that maps variable names to offsets (aka integers) in the current activation-record/frame relative to the fp.
   This makes writing code simplier for easier  addressing. eg. the first parameter is in 4($fp), next is 8($fp) ... n($fp)

   Why do we need this? It is used in code generation in expressions like Object (cool-tree.java)

3. Finish up parentTab attrTabTab (will make case expression easier to handle) (THIS IS DONE)

4. Finish up any unimplemented expressions in cool-tree.java

5. Fix up code for init, attribute, and method (in CgenNode). I think it still might be slightly wrong?

6. Write tests

7. Write README


======Questions and Follow up======
Are we allowed to change the method prototype in cool-tree.java? (i.e. code(PrintStream) to code(PrintStream, CgenClassTable))

# Stack frame base size in # of words (each word is 32 bit
#Each stack frame will at least need 3 words for:
    // 1. frame pointer to previous AR
    // 2. self object
    // 3. return address
    final static int FRAME_INITIAL_SIZE = 3;

    REMEMBER STACK GROWS FROM HIGH ADDRESS TO LOW ADDRESS

    # Our activation frame layout is as follows:
    */
    HIGH ADDRESS
-----------------------
| OLD FRAME POINTER |
-----------------------
| SELF OBJECT |
-----------------------
| ARGUMENT1 |             <- $fp + N*WORDSIZE    OR oldfp + 3*WORDSIZE
-----------------------
| ARGUMENTN |             <- $fp + 1*WORDSIZE    OR oldfp + (N+2)*WORDSIZE
-----------------------
| RETURN ADDRESS | <---- current frame pointer  ($fp)
-----------------------
LOW ADDRESS
*/

And to remind you of object layout:


--------------------         <- a0
| class Tag |
----------------------
| object size (words)        <- a0 + 1*WORDSIZE
---------------------
| Dispatch Table Ptr. |      <- a0 + 2*WORDSIZE
-----------------------
| Attribute1 |               <- a0 + 3*WORDSIZE
-------------------------
| AttributeN |               <- a0 + (N+2)*WORDSIZE
-------------------------



so the actual size of a frame will be

actual_frame_size = FRAME_INITIAL_SIZE + (# of params the function has.)


